[{"text": "Every website can be split up into two\nparts, the front end and the backend.", "start": 0.18, "duration": 4.17}, {"text": "The front end is all the visual stuff\nyou see on the webpage and the backend is", "start": 4.74, "duration": 3.99}, {"text": "what saves and manages your data. For\nexample, if you are on amazon.com,", "start": 8.73, "duration": 4.35}, {"text": "the backend would store your\norder history, your profile.", "start": 13.2, "duration": 3.03}, {"text": "It would load search results\nand much more. In this video,", "start": 16.35, "duration": 2.88}, {"text": "we're going to take a look\nat the technologies that\nare used in the backend of a", "start": 19.23, "duration": 3.48}, {"text": "website and in another video we\nexplore the front end technologies.", "start": 22.71, "duration": 3.9}, {"text": "As an example, let's say that we're\non amazon.com and we do some shopping,", "start": 27.15, "duration": 3.84}, {"text": "and now we're ready to make an order.\nWhen I click place order, what happens,", "start": 31.17, "duration": 4.32}, {"text": "we're going to start from the ground up.", "start": 36.51, "duration": 1.35}, {"text": "Any computer that's\nconnected to the internet,", "start": 38.55, "duration": 2.19}, {"text": "including your computer and my computer,", "start": 40.95, "duration": 2.01}, {"text": "can send a message across the internet\nto another computer that's also connected", "start": 43.41, "duration": 4.74}, {"text": "to the internet.\nSo to simplify things,", "start": 48.15, "duration": 2.28}, {"text": "Amazon has a computer in their\noffice building somewhere,", "start": 50.58, "duration": 2.67}, {"text": "and our computer is going to send a\nmessage continuing our order to that", "start": 53.73, "duration": 4.71}, {"text": "Amazon computer. In this scenario,", "start": 58.44, "duration": 2.31}, {"text": "the computer that is sending the\nmessage is called the client,", "start": 60.75, "duration": 2.94}, {"text": "and the computer that is receiving\nthe message is called the server.", "start": 63.93, "duration": 3.63}, {"text": "But before this happens, computers,", "start": 68.22, "duration": 2.34}, {"text": "they can't receive messages\nfrom the internet by default.", "start": 70.57, "duration": 2.84}, {"text": "We have to program them to be able\nto receive messages. To do that,", "start": 73.8, "duration": 4.17}, {"text": "we need a backend programming language.", "start": 77.97, "duration": 2.13}, {"text": "Almost every programming language has\na feature that turns a computer into a", "start": 80.64, "duration": 4.29}, {"text": "server and allows it to receive messages.", "start": 84.93, "duration": 2.31}, {"text": "Popular backend programming languages\nare JavaScript, sometimes called node js,", "start": 87.6, "duration": 4.71}, {"text": "Python, Ruby, and Java. However,", "start": 92.64, "duration": 3.03}, {"text": "using a backend programming language by\nitself is actually really difficult and", "start": 95.73, "duration": 4.05}, {"text": "requires a huge amount of code.", "start": 99.78, "duration": 1.71}, {"text": "So there are two tools that we use to\nhelp with this. A backend framework and a", "start": 101.88, "duration": 4.47}, {"text": "package manager,", "start": 106.35, "duration": 0.93}, {"text": "a backend framework helps us create a\nserver much easier and with a lot less", "start": 108.21, "duration": 4.29}, {"text": "code.", "start": 112.5, "duration": 0.833}, {"text": "Each backend programming language has a\nfew different frameworks to choose from,", "start": 113.61, "duration": 3.72}, {"text": "but the most popular ones are\nExpress JS for JavaScript, Python,", "start": 117.69, "duration": 4.19}, {"text": "Django, Rubion Rails, and\nJava Spring. In the backend,", "start": 122.16, "duration": 4.41}, {"text": "we also use a lot of code that other\npeople have written called packages to do", "start": 126.57, "duration": 4.74}, {"text": "common tasks like doing\ncalculations, talking to a database,", "start": 131.31, "duration": 3.72}, {"text": "and setting up user\nlogin and authentication.", "start": 135.21, "duration": 2.46}, {"text": "We typically use a lot of\npackages in our backend,", "start": 138.21, "duration": 2.52}, {"text": "and in order to install and\nmanage all these packages,", "start": 141.0, "duration": 3.0}, {"text": "we use something called a package manager.", "start": 144.21, "duration": 2.25}, {"text": "Each language has its own package manager.", "start": 147.06, "duration": 1.95}, {"text": "The most popular ones are NPM\nfor JavaScript, PIP for Python,", "start": 149.28, "duration": 4.5}, {"text": "bundler for Ruby, and Maven for Java.", "start": 153.84, "duration": 2.94}, {"text": "These are all the technologies we\nneed to create our backend server.", "start": 157.35, "duration": 3.36}, {"text": "The next problem we have is\nwe need somewhere to save\nthe data for our website.", "start": 161.31, "duration": 4.32}, {"text": "Going back to our Amazon example,\ndata could mean our user data,", "start": 165.96, "duration": 3.96}, {"text": "like the login information,\norder, history,", "start": 169.98, "duration": 2.88}, {"text": "as well as data for all the products\nthat are being sold on Amazon,", "start": 173.1, "duration": 3.42}, {"text": "the descriptions, the ratings, and the.", "start": 176.82, "duration": 1.83}, {"text": "Reviews. To do this, we use a database.", "start": 178.65, "duration": 2.89}, {"text": "A database helps us store and manage data.", "start": 181.96, "duration": 2.43}, {"text": "It's just a piece of software that\nusually runs on a different computer,", "start": 184.93, "duration": 3.24}, {"text": "and we have to do some setups so that\nour backend can communicate with the", "start": 188.47, "duration": 3.48}, {"text": "database. The most popular\ndatabases are MySQL, Postgres,", "start": 191.95, "duration": 4.53}, {"text": "and MongoDB. All right, so\nif you're just starting out,", "start": 196.48, "duration": 3.12}, {"text": "this is basically all\nyou need for the backend.", "start": 199.66, "duration": 2.37}, {"text": "You can build most of your projects\nwith just a server and a database.", "start": 202.39, "duration": 3.81}, {"text": "For example, here's how our\nAmazon scenario could work.", "start": 206.56, "duration": 2.82}, {"text": "When the customer places\nan order in the front end,", "start": 210.1, "duration": 2.28}, {"text": "the front end sends a message\ncontaining the order to the backend.", "start": 212.77, "duration": 3.3}, {"text": "The backend then saves the order to a\ndatabase and sends back a message to the", "start": 216.67, "duration": 4.32}, {"text": "front end confirming that\nthe order was created.", "start": 220.99, "duration": 2.76}, {"text": "The message that the front end sends\nto the backend is known as a request,", "start": 224.2, "duration": 3.96}, {"text": "and the message that the backend sends\nback is known as a response. This is", "start": 228.49, "duration": 4.53}, {"text": "called a request response cycle,", "start": 233.02, "duration": 2.07}, {"text": "and this is generally how web\napplications work. Here's another example.", "start": 235.45, "duration": 4.11}, {"text": "Let's say that you're\nin the Amazon warehouse.", "start": 239.92, "duration": 2.04}, {"text": "The warehouse might have a different\nfront end that sends a request to the", "start": 242.32, "duration": 3.78}, {"text": "backend to get our order.", "start": 246.11, "duration": 1.58}, {"text": "The backend then gets our order from\nthe database and sends it back to the", "start": 248.14, "duration": 3.78}, {"text": "warehouse front end, and then they\ngo ahead and prepare our order.", "start": 251.92, "duration": 3.33}, {"text": "Now that we've seen the overall flow,", "start": 256.33, "duration": 1.86}, {"text": "we're going to dive deeper and take\na look at what's inside a request.", "start": 258.49, "duration": 3.27}, {"text": "Here's a simplified example of a\nrequest to create an Amazon order.", "start": 262.27, "duration": 3.48}, {"text": "If we read over it, we can see that\nit's actually really easy to understand.", "start": 266.41, "duration": 3.42}, {"text": "We have the items that we ordered,", "start": 270.22, "duration": 1.56}, {"text": "the quantities and some other information\nabout our Amazon order. At the top,", "start": 272.08, "duration": 4.62}, {"text": "we have the type of the\nrequest, the domain name,", "start": 276.7, "duration": 2.94}, {"text": "and the URL path. This describes where\nthis request is going and what type of", "start": 279.76, "duration": 4.89}, {"text": "request This is. First of all, Amazon.", "start": 284.65, "duration": 3.45}, {"text": "The company has bought the\ndomain name amazon.com,", "start": 288.1, "duration": 3.18}, {"text": "and they configured it so that any\nrequest going to amazon.com will be", "start": 291.7, "duration": 4.11}, {"text": "redirected to that server\nin their office building.", "start": 295.82, "duration": 2.45}, {"text": "So that's why we're sending\nthis request to amazon.com.", "start": 298.6, "duration": 3.06}, {"text": "The type and the URL path. Identify\nwhat kind of request this is.", "start": 302.29, "duration": 4.71}, {"text": "So in this example, this is a post\nrequest to slash orders. In the backend,", "start": 307.51, "duration": 4.77}, {"text": "we use our programming language and\nbackend framework to define what types of", "start": 312.28, "duration": 3.69}, {"text": "requests are allowed and how we should\nhandle these requests. For example,", "start": 315.98, "duration": 3.56}, {"text": "we can allow a post slash orders request,", "start": 319.54, "duration": 2.82}, {"text": "and whenever we get a\npost slash orders request,", "start": 322.57, "duration": 2.37}, {"text": "we will create an order using our\nprogramming language and save it to our", "start": 325.06, "duration": 3.87}, {"text": "database. We can also allow a get\nslash order request, and in this case,", "start": 328.93, "duration": 4.26}, {"text": "we will retrieve the order history\nfrom the database and send it back as a", "start": 333.19, "duration": 4.2}, {"text": "response. Another example is a delete\nslash order request where we will cancel", "start": 337.4, "duration": 4.7}, {"text": "the order.", "start": 342.1, "duration": 0.833}, {"text": "So this list of all the different types\nof requests that the backend allows is", "start": 343.06, "duration": 4.02}, {"text": "called an a API application\nprogramming interface.", "start": 347.08, "duration": 3.75}, {"text": "The API is one of the most important\nconcepts in backend programming.", "start": 351.28, "duration": 3.33}, {"text": "If you send a request that\nis not allowed by the api,", "start": 355.03, "duration": 2.74}, {"text": "the backend will respond with an error.", "start": 357.98, "duration": 1.8}, {"text": "So we mentioned earlier that we can\nidentify requests using a type and a URL", "start": 360.59, "duration": 4.8}, {"text": "path. There are several types we\ncan choose from, such as post get,", "start": 365.4, "duration": 3.89}, {"text": "put and delete, and the URL\npath can be anything we want.", "start": 369.3, "duration": 3.56}, {"text": "So why in this example do\nwe choose post slash orders?", "start": 373.55, "duration": 3.12}, {"text": "This is just a naming\nconvention for our requests,", "start": 377.27, "duration": 2.7}, {"text": "and this naming convention is called\nrest representational state transfer.", "start": 380.3, "duration": 4.5}, {"text": "In rest, the type of the\nrequest has a special meaning.", "start": 385.34, "duration": 2.76}, {"text": "So post means to create\nsomething, and in this case,", "start": 388.4, "duration": 2.79}, {"text": "post slash orders means to create an\norder, get means to get something,", "start": 391.19, "duration": 4.2}, {"text": "and delete means to delete something\nand so on. An API that uses the", "start": 395.57, "duration": 4.59}, {"text": "REST naming convention\nis called a REST api.", "start": 400.17, "duration": 3.53}, {"text": "REST is the most common convention\nthat we use for our APIs,", "start": 404.27, "duration": 2.85}, {"text": "but there are several other\nconventions that we could use.", "start": 407.45, "duration": 2.43}, {"text": "One of them is called GraphQL,", "start": 410.33, "duration": 1.83}, {"text": "which uses Post slash GraphQL\nfor all of our requests,", "start": 412.19, "duration": 3.6}, {"text": "and another one is called rpc,", "start": 416.24, "duration": 2.04}, {"text": "which uses post and a\nmore detailed D URL path,", "start": 418.58, "duration": 3.12}, {"text": "like post slash create order or\npost slash get order history.", "start": 421.7, "duration": 4.74}, {"text": "So that is what a request is when\nan API is and what rest means. Now,", "start": 427.1, "duration": 4.8}, {"text": "let's talk about infrastructure nowadays.", "start": 431.9, "duration": 2.43}, {"text": "Instead of company's purchasing their\nown computers to run their websites,", "start": 434.33, "duration": 3.48}, {"text": "they rent computers from\na cloud computing company.", "start": 438.17, "duration": 3.21}, {"text": "The biggest cloud computing companies\nare aws, Amazon Web Services,", "start": 441.77, "duration": 4.32}, {"text": "gcp, Google Cloud platform,\nand Microsoft Azure.", "start": 446.82, "duration": 3.08}, {"text": "The basic idea of cloud computing is\nyou're renting a bunch of computers.", "start": 450.35, "duration": 3.51}, {"text": "This is also known as IAS infrastructure\nas a service. Behind the scenes,", "start": 454.31, "duration": 4.92}, {"text": "AWS has a giant powerful\ncomputer, and inside its software,", "start": 460.19, "duration": 4.38}, {"text": "it's running many smaller computers,", "start": 464.58, "duration": 1.85}, {"text": "and we're actually renting one\nof these smaller computers,", "start": 466.55, "duration": 2.91}, {"text": "and these smaller computers\nonly exist in these software,", "start": 470.09, "duration": 2.61}, {"text": "so we call them virtual machines\nor VMs. So to run our website,", "start": 472.94, "duration": 4.41}, {"text": "we rent a VM from AWS to run our backend,", "start": 477.38, "duration": 3.39}, {"text": "and we also rent another\nVM to run our database.", "start": 481.04, "duration": 2.88}, {"text": "Another problem we have to solve is\nwhat if our website gets really popular", "start": 484.55, "duration": 3.75}, {"text": "during the holiday season and we start\ngetting a lot of requests and internet", "start": 488.3, "duration": 3.48}, {"text": "traffic that our server can't\nhandle. With cloud computing,", "start": 491.78, "duration": 3.48}, {"text": "we can set up multiple VMs running these\nsame backend code and then set up a", "start": 495.29, "duration": 4.35}, {"text": "special VM in front of these\ncalled a load balancer,", "start": 499.65, "duration": 2.9}, {"text": "and the load balancer will distribute\nrequests evenly across our VMs.", "start": 503.03, "duration": 3.6}, {"text": "Once a holiday season is over,", "start": 507.08, "duration": 1.5}, {"text": "we can just shut off our VMs when we\ndon't need them. This is a lot easier than", "start": 508.58, "duration": 4.38}, {"text": "having to buy physical computers\nwhere if the holiday season is over,", "start": 512.96, "duration": 3.66}, {"text": "you still have the physical\ncomputers that you paid for,", "start": 516.8, "duration": 2.79}, {"text": "but we still have another problem.", "start": 520.01, "duration": 1.32}, {"text": "We now have a lot of VMs that\nwe need to create and set up,", "start": 521.78, "duration": 3.09}, {"text": "and it takes a lot of time and effort.", "start": 524.99, "duration": 1.74}, {"text": "Cloud computing companies offer another\nservice called a PAs a platform As a", "start": 527.3, "duration": 4.83}, {"text": "service, a PAs just lets\nus upload our backend code.", "start": 532.13, "duration": 3.73}, {"text": "It will set up all the VMs\nincluding the load balancer,", "start": 536.22, "duration": 2.67}, {"text": "and integrate everything for us.", "start": 538.89, "duration": 1.53}, {"text": "The three most popular paths are\nElastic Beanstalk for AWS App Engine for", "start": 540.93, "duration": 4.92}, {"text": "GCP and App Service for Microsoft Azure.", "start": 546.0, "duration": 3.21}, {"text": "The next concept we're going\nto look at is microservices.", "start": 549.84, "duration": 2.88}, {"text": "For our Amazon example,", "start": 553.2, "duration": 1.44}, {"text": "let's say that our backend contains code\nthat saves an order to the database,", "start": 554.76, "duration": 3.75}, {"text": "charges the user's credit card,", "start": 558.87, "duration": 1.56}, {"text": "and sends an email confirmation.\nIn the real world,", "start": 560.49, "duration": 3.27}, {"text": "this backend can be\nmillions of lines of code.", "start": 563.77, "duration": 2.45}, {"text": "So we split this up into three code bases.", "start": 566.55, "duration": 2.61}, {"text": "Then each of these code bases\nwill have their own backend,", "start": 569.43, "duration": 2.88}, {"text": "each with the load balancer and\nsometimes their own database.", "start": 572.64, "duration": 3.12}, {"text": "Then when we need to send an email,", "start": 576.06, "duration": 1.62}, {"text": "our orders backend will send a\nrequest to the email backend,", "start": 577.98, "duration": 3.69}, {"text": "which will send the email.", "start": 581.88, "duration": 1.08}, {"text": "So splitting up our backend into\nseparate backends like this is called", "start": 583.35, "duration": 3.93}, {"text": "microservices, and it helps keep our\ncode base smaller and more focused.", "start": 587.31, "duration": 4.65}, {"text": "Each microservice does not have to\nuse the same programming language and", "start": 592.44, "duration": 3.15}, {"text": "database.", "start": 595.59, "duration": 0.833}, {"text": "One microservice can be using JavaScript\nand MongoDB while another microservice", "start": 596.49, "duration": 4.08}, {"text": "can be using Python and MySQL.\nNow, to make this even easier,", "start": 600.57, "duration": 4.38}, {"text": "there are companies out there like\nTwilio who have already created an email", "start": 605.22, "duration": 3.78}, {"text": "service.", "start": 609.0, "duration": 0.833}, {"text": "So Twilio provides a backend and an API\nfor sending emails. So instead of us", "start": 609.87, "duration": 4.83}, {"text": "creating our own email microservice,", "start": 614.7, "duration": 2.13}, {"text": "our backend can just send\nrequests to Twilio's backend.", "start": 617.16, "duration": 2.91}, {"text": "When a company provides a backend and an\nAPI that outside applications can use,", "start": 620.52, "duration": 4.65}, {"text": "this is called a SaaS,\nsoftware as a service.", "start": 625.5, "duration": 2.97}, {"text": "Pretty much everything you do in\nthe backend that's complicated.", "start": 628.86, "duration": 2.73}, {"text": "This probably a SaaS company out there\nthat already provides that service,", "start": 631.89, "duration": 3.6}, {"text": "and you can just use that service instead\nof building your own microservice.", "start": 635.7, "duration": 3.57}, {"text": "So these three concepts we just looked\nat, infrastructure as a service,", "start": 639.87, "duration": 3.51}, {"text": "platforms as a service,", "start": 644.2, "duration": 0.833}, {"text": "and software as a service are the\nthree foundations of cloud computing.", "start": 645.24, "duration": 4.05}, {"text": "These days,", "start": 649.77, "duration": 0.6}, {"text": "most companies use cloud computing to run\nthe backend for their websites instead", "start": 650.37, "duration": 4.29}, {"text": "of buying and managing physical servers\nthemselves. In this last section,", "start": 654.66, "duration": 4.32}, {"text": "I want to introduce some additional\ntechnologies you might see in the backend.", "start": 659.01, "duration": 3.48}, {"text": "Previously, we mentioned the\ndatabases, MySQL, Postgres,", "start": 662.79, "duration": 3.05}, {"text": "and MongoDB. These are sometimes called\nprimary databases because they're the", "start": 665.84, "duration": 4.3}, {"text": "main database that our\nwebsite uses. Generally,", "start": 670.15, "duration": 2.99}, {"text": "we start our backend with a server and\na primary database and then bring in", "start": 673.15, "duration": 4.4}, {"text": "these additional\ntechnologies if we need to,", "start": 677.55, "duration": 2.04}, {"text": "if we allow our users to upload images.", "start": 680.55, "duration": 2.19}, {"text": "A primary database is not\ngood for storing images,", "start": 683.13, "duration": 2.58}, {"text": "so we would use a blob store like aws, s3,", "start": 685.74, "duration": 3.22}, {"text": "and a CDN like CloudFront to store\nand load user uploaded images", "start": 689.31, "duration": 4.38}, {"text": "if we want to allow text search.", "start": 694.23, "duration": 1.98}, {"text": "Primary databases are\nvery slow at text search,", "start": 696.22, "duration": 3.14}, {"text": "so we would bring in a search\ndatabase like Elastic Search.", "start": 699.66, "duration": 3.54}, {"text": "If our website is getting a lot of traffic\nand we need to take some stress off", "start": 703.71, "duration": 3.45}, {"text": "our primary database, we would add a\ncache like Redis to improve performance.", "start": 707.16, "duration": 4.92}, {"text": "If.", "start": 712.71, "duration": 0.16}, {"text": "We want to do data science,", "start": 712.87, "duration": 1.26}, {"text": "we don't want to do the data\nanalysis using our primary database.", "start": 714.31, "duration": 3.42}, {"text": "It's busy running our website.", "start": 718.03, "duration": 1.35}, {"text": "So we would copy all of our data into\nan analytical database like Snowflake,", "start": 719.77, "duration": 4.29}, {"text": "which is really good for doing\ndata science on the side.", "start": 724.33, "duration": 2.82}, {"text": "If you want to schedule a\ntask for later. For example,", "start": 727.87, "duration": 2.97}, {"text": "Amazon might want to email their users\nbefore their Amazon Prime subscription", "start": 730.87, "duration": 3.69}, {"text": "renews.", "start": 734.56, "duration": 0.66}, {"text": "We would use a job queue like Rabbit MQ\nto schedule this task for the future,", "start": 735.22, "duration": 4.59}, {"text": "and there's a bunch more technologies\nlike these out there that are made to", "start": 740.32, "duration": 3.45}, {"text": "solve specific problems.", "start": 743.77, "duration": 1.77}, {"text": "So these are all the backend technologies\nthat we covered in this video.", "start": 745.96, "duration": 3.39}, {"text": "If you're just starting out,", "start": 749.95, "duration": 1.08}, {"text": "you mostly just need to know\nhow to use cloud computing,", "start": 751.18, "duration": 2.88}, {"text": "a backend framework in a primary database.", "start": 754.45, "duration": 2.52}, {"text": "These other technologies are\nthings that you may or may not use.", "start": 757.45, "duration": 3.12}, {"text": "You would add them to your backend\ndepending on what kind of website and", "start": 760.78, "duration": 3.33}, {"text": "features you're trying to\nmake. Thanks for watching.", "start": 764.12, "duration": 2.57}, {"text": "My name is Simon from Super simple.dev.", "start": 766.69, "duration": 2.19}, {"text": "I want to make a tech\ncareer possible for anyone.", "start": 768.97, "duration": 2.22}, {"text": "If you have any questions or comments,", "start": 771.7, "duration": 1.56}, {"text": "please leave them down below and\nI'll see you in the next one.", "start": 773.44, "duration": 2.91}]