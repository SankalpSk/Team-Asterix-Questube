{"0 - 295.81": "Every website can be split up into two\nparts, the front end and the backend. The front end is all the visual stuff\nyou see on the webpage and the backend is what saves and manages your data. For\nexample, if you are on amazon.com, the backend would store your\norder history, your profile. It would load search results\nand much more. In this video, we're going to take a look\nat the technologies that\nare used in the backend of a website and in another video we\nexplore the front end technologies. As an example, let's say that we're\non amazon.com and we do some shopping, and now we're ready to make an order.\nWhen I click place order, what happens, we're going to start from the ground up. Any computer that's\nconnected to the internet, including your computer and my computer, can send a message across the internet\nto another computer that's also connected to the internet.\nSo to simplify things, Amazon has a computer in their\noffice building somewhere, and our computer is going to send a\nmessage continuing our order to that Amazon computer. In this scenario, the computer that is sending the\nmessage is called the client, and the computer that is receiving\nthe message is called the server. But before this happens, computers, they can't receive messages\nfrom the internet by default. We have to program them to be able\nto receive messages. To do that, we need a backend programming language. Almost every programming language has\na feature that turns a computer into a server and allows it to receive messages. Popular backend programming languages\nare JavaScript, sometimes called node js, Python, Ruby, and Java. However, using a backend programming language by\nitself is actually really difficult and requires a huge amount of code. So there are two tools that we use to\nhelp with this. A backend framework and a package manager, a backend framework helps us create a\nserver much easier and with a lot less code. Each backend programming language has a\nfew different frameworks to choose from, but the most popular ones are\nExpress JS for JavaScript, Python, Django, Rubion Rails, and\nJava Spring. In the backend, we also use a lot of code that other\npeople have written called packages to do common tasks like doing\ncalculations, talking to a database, and setting up user\nlogin and authentication. We typically use a lot of\npackages in our backend, and in order to install and\nmanage all these packages, we use something called a package manager. Each language has its own package manager. The most popular ones are NPM\nfor JavaScript, PIP for Python, bundler for Ruby, and Maven for Java. These are all the technologies we\nneed to create our backend server. The next problem we have is\nwe need somewhere to save\nthe data for our website. Going back to our Amazon example,\ndata could mean our user data, like the login information,\norder, history, as well as data for all the products\nthat are being sold on Amazon, the descriptions, the ratings, and the. Reviews. To do this, we use a database. A database helps us store and manage data. It's just a piece of software that\nusually runs on a different computer, and we have to do some setups so that\nour backend can communicate with the database. The most popular\ndatabases are MySQL, Postgres, and MongoDB. All right, so\nif you're just starting out, this is basically all\nyou need for the backend. You can build most of your projects\nwith just a server and a database. For example, here's how our\nAmazon scenario could work. When the customer places\nan order in the front end, the front end sends a message\ncontaining the order to the backend. The backend then saves the order to a\ndatabase and sends back a message to the front end confirming that\nthe order was created. The message that the front end sends\nto the backend is known as a request, and the message that the backend sends\nback is known as a response. This is called a request response cycle, and this is generally how web\napplications work. Here's another example. Let's say that you're\nin the Amazon warehouse. The warehouse might have a different\nfront end that sends a request to the backend to get our order. The backend then gets our order from\nthe database and sends it back to the warehouse front end, and then they\ngo ahead and prepare our order. Now that we've seen the overall flow, we're going to dive deeper and take\na look at what's inside a request. Here's a simplified example of a\nrequest to create an Amazon order. If we read over it, we can see that\nit's actually really easy to understand. We have the items that we ordered, the quantities and some other information\nabout our Amazon order. At the top, we have the type of the\nrequest, the domain name, and the URL path. This describes where\nthis request is going and what type of request This is. First of all, Amazon. The company has bought the\ndomain name amazon.com,", "295.81 - 595.59": "redirected to that server\nin their office building. So that's why we're sending\nthis request to amazon.com. The type and the URL path. Identify\nwhat kind of request this is. So in this example, this is a post\nrequest to slash orders. In the backend, we use our programming language and\nbackend framework to define what types of requests are allowed and how we should\nhandle these requests. For example, we can allow a post slash orders request, and whenever we get a\npost slash orders request, we will create an order using our\nprogramming language and save it to our database. We can also allow a get\nslash order request, and in this case, we will retrieve the order history\nfrom the database and send it back as a response. Another example is a delete\nslash order request where we will cancel the order. So this list of all the different types\nof requests that the backend allows is called an a API application\nprogramming interface. The API is one of the most important\nconcepts in backend programming. If you send a request that\nis not allowed by the api, the backend will respond with an error. So we mentioned earlier that we can\nidentify requests using a type and a URL path. There are several types we\ncan choose from, such as post get, put and delete, and the URL\npath can be anything we want. So why in this example do\nwe choose post slash orders? This is just a naming\nconvention for our requests, and this naming convention is called\nrest representational state transfer. In rest, the type of the\nrequest has a special meaning. So post means to create\nsomething, and in this case, post slash orders means to create an\norder, get means to get something, and delete means to delete something\nand so on. An API that uses the REST naming convention\nis called a REST api. REST is the most common convention\nthat we use for our APIs, but there are several other\nconventions that we could use. One of them is called GraphQL, which uses Post slash GraphQL\nfor all of our requests, and another one is called rpc, which uses post and a\nmore detailed D URL path, like post slash create order or\npost slash get order history. So that is what a request is when\nan API is and what rest means. Now, let's talk about infrastructure nowadays. Instead of company's purchasing their\nown computers to run their websites, they rent computers from\na cloud computing company. The biggest cloud computing companies\nare aws, Amazon Web Services, gcp, Google Cloud platform,\nand Microsoft Azure. The basic idea of cloud computing is\nyou're renting a bunch of computers. This is also known as IAS infrastructure\nas a service. Behind the scenes, AWS has a giant powerful\ncomputer, and inside its software, it's running many smaller computers, and we're actually renting one\nof these smaller computers, and these smaller computers\nonly exist in these software, so we call them virtual machines\nor VMs. So to run our website, we rent a VM from AWS to run our backend, and we also rent another\nVM to run our database. Another problem we have to solve is\nwhat if our website gets really popular during the holiday season and we start\ngetting a lot of requests and internet traffic that our server can't\nhandle. With cloud computing, we can set up multiple VMs running these\nsame backend code and then set up a special VM in front of these\ncalled a load balancer, and the load balancer will distribute\nrequests evenly across our VMs. Once a holiday season is over, we can just shut off our VMs when we\ndon't need them. This is a lot easier than having to buy physical computers\nwhere if the holiday season is over, you still have the physical\ncomputers that you paid for, but we still have another problem. We now have a lot of VMs that\nwe need to create and set up, and it takes a lot of time and effort. Cloud computing companies offer another\nservice called a PAs a platform As a service, a PAs just lets\nus upload our backend code. It will set up all the VMs\nincluding the load balancer, and integrate everything for us. The three most popular paths are\nElastic Beanstalk for AWS App Engine for GCP and App Service for Microsoft Azure. The next concept we're going\nto look at is microservices. For our Amazon example, let's say that our backend contains code\nthat saves an order to the database, charges the user's credit card, and sends an email confirmation.\nIn the real world, this backend can be\nmillions of lines of code. So we split this up into three code bases. Then each of these code bases\nwill have their own backend, each with the load balancer and\nsometimes their own database. Then when we need to send an email, our orders backend will send a\nrequest to the email backend, which will send the email. So splitting up our backend into\nseparate backends like this is called microservices, and it helps keep our\ncode base smaller and more focused."}